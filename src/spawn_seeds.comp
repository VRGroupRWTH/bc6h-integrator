#version 450 core
#extension GL_GOOGLE_include_directive : require

#include "integration.glsl"

void main()
{
    const uint seed_id =
        gl_GlobalInvocationID.x +
        gl_GlobalInvocationID.y * gl_NumWorkGroups.x +
        gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y;
    const uint line_buffer_offset = seed_id * constants.step_count;
    
    const vec3 initial_position = vec3(
        gl_GlobalInvocationID.x / float(gl_NumWorkGroups.x - 1) * constants.dataset_dimensions.x,
        gl_GlobalInvocationID.y / float(gl_NumWorkGroups.y - 1) * constants.dataset_dimensions.y,
        gl_GlobalInvocationID.z / float(gl_NumWorkGroups.z - 1) * constants.dataset_dimensions.z
    );
    vertices[line_buffer_offset] = initial_position;
    atomicAdd(progress, 1);

    indirect_draw[seed_id].vertex_count = 1;
    indirect_draw[seed_id].instance_count = 1;
    indirect_draw[seed_id].first_vertex = 0;
    indirect_draw[seed_id].first_instance = 0;

    vec3 position = initial_position;
    for (uint i = 1; i < constants.step_count; ++i) {
        float t = (float(i) / constants.step_count) * constants.dataset_dimensions.w;
        const vec3 next_position = position + sample_dataset(vec4(position, t));
        vertices[line_buffer_offset + i] = next_position;
        position = next_position;

        atomicAdd(indirect_draw[seed_id].vertex_count, 1);
        atomicAdd(progress, 1);
    }
}
